#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# globle values
INLONG_HOME=$(
  cd $(dirname $0)
  cd ..
  pwd
)
TUBEMQDBNAME="tubemanager"           # tubemq manager database
INLONGDBNAME="apache_inlong_manager" # inlong manager Metabase name
source $INLONG_HOME/conf/inlong.conf

command_help() {
  echo "Usage: ./inlong-daemon (start|stop) <command>
    where command is one of:
    audit               Run a Audit Service
    tubemaster          Run a TubeMQ Master Service
    tubebroker          Run a TubeMQ Broker Service
    tubemanager         Run a TubeMQ Manager Service
    manager             Run a Manager Service
    dashboard           Run a Dashboard Service
    dataproxy           Run a Dataproxy Service
    agent               Run a Agent Service
    sort                Run a Sort Service
    standalone          Run a Standalone mode(All Service)"
}

# if less than two arguments supplied
if [ $# -lt 2 ]; then
  command_help
  exit 1
fi

COMMAND=$1
SERVICE=$2
init_compo() {
  if [[ "$SERVICE" != standalone ]]; then
    cd $INLONG_HOME/bin
    echo "init $SERVICE"
    ./init-config.sh $SERVICE
  fi
}

start_inlong_tubemaster() {
  init_compo
  echo "start-up tubemq master ..."
  cd $INLONG_HOME/inlong-tubemq-server/bin
  chmod 755 tubemq.sh
  ./tubemq.sh master start
}

start_inlong_tubebroker() {
  init_compo
  # Judge whether the TubeMqMaster is started in the current system
  tubemq_master_thread=$($JAVA_HOME/bin/jps | grep MasterStartup)
  if [[ ! -n "$tubemq_master_thread" ]]; then
    echo "The system does not start tubemqMaster or starts abnormally. Please start tubemqMaster normally first"
    exit 1
  fi
  # add broker
  curl -d 'type=op_modify&method=admin_add_broker_configure&brokerId='"$broker_id"'&brokerIp='"$tubebroker_hostname"'&createUser=docker&brokerPort='"$tubebroker_port"'&deletePolicy=delete,168h&numPartitions=3&unflushThreshold=1000&acceptPublish=true&acceptSubscribe=true&unflushInterval=10000&confModAuthToken='"$confmod_authtoken"'' http://$tubemaster_hostname:$tubemaster_webport/webapi.htm
  # online
  curl -d 'type=op_modify&method=admin_online_broker_configure&brokerId='"$broker_id"'&modifyUser=docker&confModAuthToken='"$confmod_authtoken"'' http://$tubemaster_hostname:$tubemaster_webport/webapi.htm
  # broker start
  echo "start-up tubemq broker ..."
  cd $INLONG_HOME/inlong-tubemq-server/bin
  chmod 755 tubemq.sh
  ./tubemq.sh broker start
}

start_inlong_tubemanager() {
  init_compo
  # Judge whether the  TubeMqServer is started in the current system
  tubemq_broker_thread=$($JAVA_HOME/bin/jps | grep BrokerStartup)
  tubemq_master_thread=$($JAVA_HOME/bin/jps | grep MasterStartup)
  if [[ ! -n "$tubemq_broker_thread" && ! -n "$tubemq_master_thread" ]]; then
    echo "The system does not start tubemqServer or starts abnormally. Please start tubemqServer(master and broker) normally first"
    exit 1
  fi
  echo "start-up tubemq manager ..."
  cd $INLONG_HOME/inlong-tubemq-manager/bin
  # create tubemanager database
  create_db_sql="create database IF NOT EXISTS ${TUBEMQDBNAME}"
  mysql -h${spring_datasource_hostname} -P${spring_datasource_port} -u${spring_datasource_username} -p${spring_datasource_password} -e "${create_db_sql}"
  ./start-manager.sh
  sleep 10
  # first init
  flag=$(cat init-tube-cluster.sh | grep "flag=1")
  if [ ! -n "$flag" ]; then
    echo "init shell config"
    sed -i 's/TUBE_MANAGER_IP=.*/'''TUBE_MANAGER_IP=${tube_manager_ip}'''/g' init-tube-cluster.sh
    sed -i 's/TUBE_MANAGER_PORT=.*/'''TUBE_MANAGER_PORT=${tube_manager_port}'''/g' init-tube-cluster.sh
    sed -i 's/TUBE_MASTER_IP=.*/'''TUBE_MASTER_IP=${tubemaster_hostname}'''/g' init-tube-cluster.sh
    sed -i 's/TUBE_MASTER_PORT=.*/'''TUBE_MASTER_PORT=${tubemaster_port}'''/g' init-tube-cluster.sh
    sed -i 's/TUBE_MASTER_WEB_PORT=.*/'''TUBE_MASTER_WEB_PORT=${tubemaster_webport}'''/g' init-tube-cluster.sh
    sed -i 's/TUBE_MASTER_TOKEN=.*/'''TUBE_MASTER_TOKEN=${confmod_authtoken}'''/g' init-tube-cluster.sh
    echo "init tubemq cluster"
    ./init-tube-cluster.sh
    echo -e "\nflag=1" >>init-tube-cluster.sh
  else
    echo "tubemq cluster initialized,skip"
  fi
}

start_inlong_audit() {
  init_compo
  echo "init apache_inlong_audit"
  cd $INLONG_HOME/inlong-audit
  select_db_sql="SELECT COUNT(*) FROM information_schema.TABLES WHERE table_schema = 'apache_inlong_audit'"
  inlong_audit_count=$(mysql -h${spring_datasource_hostname} -P${spring_datasource_port} -u${spring_datasource_username} -p${spring_datasource_password} -e "${select_db_sql}")
  inlong_num=$(echo $inlong_audit_count | tr -cd "[0-9]")
  if [ $inlong_num -eq 0 ]; then
    mysql -h${spring_datasource_hostname} -P${spring_datasource_port} -u${spring_datasource_username} -p${spring_datasource_password} <sql/apache_inlong_audit.sql
  else
    echo "apache_inlong_audit database initialized,skip"
  fi
  if [ $source_type == "pulsar" ]; then
    cd $INLONG_HOME/inlong-audit/bin
    echo "start-up audit"
    ./proxy-start.sh
    echo "start audit_store"
    ./store-start.sh
  fi
}

start_inlong_manager() {
  init_compo
  echo "start-up inlong manager ..."
  cd $INLONG_HOME/inlong-manager
  # Whether the database table exists. If it does not exist, initialize the database and skip if it exists.
  select_db_sql="SELECT COUNT(*) FROM information_schema.TABLES WHERE table_schema = '${INLONGDBNAME}'"
  inlong_manager_count=$(mysql -h${spring_datasource_hostname} -P${spring_datasource_port} -u${spring_datasource_username} -p${spring_datasource_password} -e "${select_db_sql}")
  inlong_num=$(echo $inlong_manager_count | tr -cd "[0-9]")
  if [ $inlong_num -eq 0 ]; then
    echo "init apache_inlong_manager database"
    mysql -h${spring_datasource_hostname} -P${spring_datasource_port} -u${spring_datasource_username} -p${spring_datasource_password} <sql/apache_inlong_manager.sql
  else
    echo "apache_inlong_manager database initialized,skip"
  fi
  cd $INLONG_HOME/inlong-manager/bin
  ./startup.sh
}

start_inlong_dashboard() {
  echo "start-up inlong dashboard ..."
  if [[ "$manager_server_hostname" == "localhost" || "$manager_server_hostname" == "127.0.0.1" ]]; then
    manager_server_hostname=$local_ip
  fi
  docker pull inlong/dashboard:latest
  docker run -d --name dashboard -e MANAGER_API_ADDRESS=$manager_server_hostname:$manager_server_port -p $inlong_web_port:$docker_inlong_web_port inlong/dashboard
}

start_inlong_dataproxy() {
  init_compo
  echo "start-up inlong dataproxy ..."
  cd $INLONG_HOME/inlong-dataproxy/bin
  chmod 755 *.sh
  ./dataproxy-start.sh
}

start_inlong_agent() {
  init_compo
  echo "start-up inlong agent ..."
  cd $INLONG_HOME/inlong-agent/bin
  ./agent.sh start
}

start_inlong_sort() {
  echo "start-up inlong sort ..."
  # Judge whether the system has started Fink cluster
  flink_thread=$($JAVA_HOME/bin/jps | grep TaskManagerRunner)
  if [ ! -n "$flink_thread" ]; then
    echo "The system does not start Flink. Please start Flink manually first"
    exit 1
  else
    echo "Currently, the system starts Flink, which is used to process sort tasks"
  fi
  # This file is mainly used to find the Flink bin directory
  flagfile=$(find / -name find-flink-home.sh)
  flink_bin=$(dirname $flagfile)
  cd $INLONG_HOME
  $flink_bin/flink run -c org.apache.inlong.sort.flink.Entrance inlong-sort/sort-dist*.jar \
  --cluster-id $sort_app_name --zookeeper.quorum $zkserver_addr --zookeeper.path.root $cluster_zk_root \
  --source.type $source_type --sink.type $sink_type &
}

# start inlong
start_inlong_all() {
  echo "init components"
  cd $INLONG_HOME/bin
  ./init-config.sh
  # start-up message middleware
  echo "Judge the choice of message middleware tubemq or pulsar"
  if [ $source_type == "pulsar" ]; then
    # Judge whether the pulsar cluster is started in the current system
    pulsar_thread=$($JAVA_HOME/bin/jps | egrep 'PulsarBrokerStarter | PulsarStandaloneStarter')
    if [ ! -n "$pulsar_thread" ]; then
      echo "The system does not start the pulsar. Please start the pulsar manually first"
      exit 1
    else
      echo "The current system starts the pulsar, which is used to complete message delivery and storage"
    fi
  else
    #start-up inlong tubemaster
    start_inlong_tubemaster
    sleep 15
    #start-up inlong tubebroker
    start_inlong_tubebroker
    #start-up inlong tubemanager
    start_inlong_tubemanager
  fi
  #start-up inlong audit
  start_inlong_audit
  # start-up inlong manager
  start_inlong_manager
  # start-up inlong dashboard
  start_inlong_dashboard
  # start-up inlong dataproxy
  start_inlong_dataproxy
  # start-up inlong agent
  start_inlong_agent
  # start-up inlong sort
  start_inlong_sort
}

stop_inlong_tubemaster() {
  echo "stop tubemq_master... "
  cd $INLONG_HOME/inlong-tubemq-server/bin
  chmod 755 tubemq.sh
  ./tubemq.sh master stop
}

stop_inlong_tubebroker() {
  echo "stop tubemq_broker ... "
  cd $INLONG_HOME/inlong-tubemq-server/bin
  chmod 755 tubemq.sh
  ./tubemq.sh broker stop
}

stop_inlong_tubemanager() {
  echo "stop tubemq_manager ... "
  cd $INLONG_HOME/inlong-tubemq-manager/bin
  ./stop-manager.sh
}

stop_inlong_manager() {
  echo "stop inlong_manager ... "
  cd $INLONG_HOME/inlong-manager/bin
  ./shutdown.sh
}

stop_inlong_dashboard() {
  docker stop dashboard
  docker rm dashboard
}

stop_inlong_dataproxy() {
  echo "stop dataproxy ... "
  cd $INLONG_HOME/inlong-dataproxy/bin
  chmod 755 *.sh
  ./dataproxy-stop.sh
}

stop_inlong_audit() {
  echo "stop audit ... "
  cd $INLONG_HOME/inlong-audit/bin
  ./proxy-stop.sh
  ./store-stop.sh
}

stop_inlong_agent() {
  echo "stop agent ... "
  cd $INLONG_HOME/inlong-agent/bin
  ./agent.sh stop
}

stop_inlong_sort() {
  echo "stop CliFrontend... "
  cli_frontend_thread=$($JAVA_HOME/bin/jps | grep CliFrontend)
  if [ ! -n "$cli_frontend_thread" ]; then
    echo "The system did not running cli_frontend"
  else
    cli_frontend_pid=$(echo $cli_frontend_thread | tr -cd "[0-9]")
    kill -9 $cli_frontend_pid
    echo "cli_frontend stopped "
  fi
  echo "stop sort flink job"
  #This file is mainly used to find the Flink bin directory
  flagfile=$(find / -name find-flink-home.sh)
  flink_bin=$(dirname $flagfile)
  runjob=$($flink_bin/flink list -r | grep "$sort_app_name")
  OLD_IFS="$IFS"
  IFS=":"
  array=($runjob)
  IFS="$OLD_IFS"
  jobId=$(echo "${array[3]}")
  echo $jobId
  $flink_bin/flink cancel $jobId
}

# stop inlong
stop_inlong_all() {
  #stop inlong tubemq
  if [ $source_type == "tubemq" ]; then
    # stop inlong tubemaster
    stop_inlong_tubemaster
    # stop inlong tubebroker
    stop_inlong_tubebroker
    # stop inlong tubemanager
    stop_inlong_tubemanager
  fi
  # stop inlong manager
  stop_inlong_manager
  # stop inlong website
  stop_inlong_dashboard
  if [ $source_type == "pulsar" ]; then
    # stop inlong audit
    stop_inlong_audit
  fi
  # stop inlong dataproxy
  stop_inlong_dataproxy
  # stop inlong agent
  stop_inlong_agent
  # stop inlong sort
  stop_inlong_sort
}


if [[ "$COMMAND" == start || "$COMMAND" == stop ]]; then
  case $SERVICE in
  tubemaster | tubebroker | tubemanager | manager | dashboard | dataproxy | agent | sort | audit)
    ${COMMAND}_inlong_${SERVICE}
    ;;
  standalone)
    ${COMMAND}_inlong_all
    ;;
  *)
    command_help
    exit 1
    ;;
  esac
else
  command_help
  exit 1
fi
